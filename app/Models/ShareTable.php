<?php

namespace App\Models;

use App\Casts\ExpiresAtCast;
use App\Lib\EShareTableType;
use App\Lib\Utils\RouteNameField;
use Exception;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Relations\HasOne;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\URL;
use LaravelIdea\Helper\App\Models\_IH_SharePermissions_C;

class ShareTable extends Model
{
    protected $fillable = [
        'member_id',
        'name',
        'description',
        'type',
        'expired_at',
        'short_code',
        'secret',
    ];

    protected $casts = [
        'expired_at' => ExpiresAtCast::class,
        'member_id' => "int"
    ];

    use HasFactory;

    /**
     * @return \Illuminate\Database\Eloquent\Collection<VirtualFile> | VirtualFile[]
     */
    public function getAllVirtualFiles()
    {
        $hasMany = $this->shareTableVirtualFile();
        /** @var ShareTableVirtualFile $shareTableVirtualFile */
        $shareTableVirtualFiles = $hasMany->get();
        /** @var VirtualFile[] $virtualFiles */
        $virtualFiles = [];
        foreach ($shareTableVirtualFiles as $shareTableVirtualFile) {
            $results = $shareTableVirtualFile->virtualFile()->getResults();
            $virtualFiles [] = $results;
        }
        return \Illuminate\Database\Eloquent\Collection::make($virtualFiles);
    }

    public function shareTableVirtualFile(): HasMany
    {
        return $this->hasMany(ShareTableVirtualFile::class, 'share_table_id', 'id');
    }

    public function member(): HasOne
    {
        return $this->hasOne(Member::class, 'id', 'member_id');
    }

//    public function __call($method, $parameters)
//    {
//        try {
//            return parent::__call($method, $parameters); // TODO: Change the autogenerated stub
//        } catch (Exception $e) {
//            dump($method, $parameters);
//            if($method === "shareTablePermissions") {
//                if(count($parameters) === 1 && $parameters[0] === null) {
//                    dump('0');
//                    return $this->internalShareTablePermissions()->rightJoin('share_tables', 'share_tables_id', '=', 'share_tables.id');
//                } elseif (count($parameters) === 1) {
//                    dump('1');
//                    if($parameters[0] instanceof Member) {
//                        return $this->internalShareTablePermissions()->where('member_id', '=', $parameters[0]->id);
//                    }
//                }
//            }
//        }
//    }
//
//    private function internalShareTablePermissions(): \Illuminate\Database\Eloquent\Relations\MorphMany
//    {
//        return $this->morphMany(SharePermissions::class, 'permissible');
//    }

    /**
     * @return Collection
     */
    public function relationMember()
    {
        $results = $this->shareTablePermission()->with('member')->getResults()->pluck('member');
        return $results;
    }

    public function shareTablePermission(): HasMany
    {
        return $this->hasMany(SharePermissions::class, 'share_tables_id', 'id');
    }

    public function shareURL(): string
    {
        return route(
            RouteNameField::PageShareableShareTableItem->value,
            ['shortcode' => $this->short_code],
        );
    }

    public function viewable(Member $member){
        if ($this->type !== EShareTableType::public) {
            $memberPermission = $this->shareTablePermission()->where('member_id', '=', $member->id);
            if ($memberPermission->exists()) {
                $memberPermission = $memberPermission->getResults();
                dump($memberPermission);
            }
        }
        return true;
    }

    public function isOwner(Member $member): bool
    {
        return $this->member_id === $member->id;
    }

    public function isPermissionMember(Member $member): bool
    {
        return $this->shareTablePermission()->where('member_id', '=', $member->id)->exists();
    }
}
